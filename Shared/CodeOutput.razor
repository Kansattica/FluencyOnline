@using FluencyOnline.Models;
@inherits ParseInterpret;

<div class="main outputbox">
    <div>@Status</div><br/>
    @foreach (var outputline in Output)
    {
        @outputline <br/>
    }
</div>

@code {
    [Parameter]
    private bool Verbose {get; set;}

    [Parameter]
    private string Program {get; set;}

    [Parameter]
    private EventCallback<string> ProgramChanged {get; set;}

    [Parameter]
    private string Input {get; set;}

    [Parameter]
    private EventCallback<string> InputChanged {get; set;}

    private IEnumerable<string> Output { get; set;} = new string[]{};
    private string Status { get; set;}

    protected override void OnInit()
    {
        handler = (ex) => {
            Status = ExtractEx(ex);
            Output = new string[]{};
        };
    }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(Input) || string.IsNullOrWhiteSpace(Program)) { return; }
        Input = Input.Trim();
        Status = "";
        Output = Go(Program, Input); 
    }

    private string ExtractEx(Exception ex)
    {
        string toReturn = ex.Message;
        while (ex.InnerException != null)
        {
            ex = ex.InnerException;
            toReturn = string.Concat(toReturn, "\n", ex.Message);
        }
        return toReturn;
    }
}